"""
Flight dynamics and stability control for aerospace vehicles in IX-Paul.

Includes aerodynamic force calculations, control surface modeling,
and stability margin estimations.
"""

import math

def lift_force(density: float, velocity: float, wing_area: float, lift_coefficient: float) -> float:
    """
    Calculate the lift force on an aircraft wing.

    Args:
        density (float): Air density in kg/m^3.
        velocity (float): Velocity of the aircraft in m/s.
        wing_area (float): Wing surface area in m^2.
        lift_coefficient (float): Dimensionless lift coefficient.

    Returns:
        float: Lift force in newtons.
    """
    return 0.5 * density * velocity ** 2 * wing_area * lift_coefficient

def drag_force(density: float, velocity: float, reference_area: float, drag_coefficient: float) -> float:
    """
    Calculate the drag force on an aircraft.

    Args:
        density (float): Air density in kg/m^3.
        velocity (float): Velocity of the aircraft in m/s.
        reference_area (float): Reference area for drag in m^2.
        drag_coefficient (float): Dimensionless drag coefficient.

    Returns:
        float: Drag force in newtons.
    """
    return 0.5 * density * velocity ** 2 * reference_area * drag_coefficient

def stability_margin(center_of_gravity: float, neutral_point: float) -> float:
    """
    Calculate static margin for longitudinal stability.

    Args:
        center_of_gravity (float): Position of center of gravity in meters.
        neutral_point (float): Position of neutral point in meters.

    Returns:
        float: Static margin (positive means stable).
    """
    return neutral_point - center_of_gravity

def control_surface_effectiveness(deflection_angle_deg: float, control_surface_area: float, dynamic_pressure: float, effectiveness_factor: float) -> float:
    """
    Estimate the control surface force generated by deflection.

    Args:
        deflection_angle_deg (float): Deflection angle in degrees.
        control_surface_area (float): Area of control surface in m^2.
        dynamic_pressure (float): Dynamic pressure in N/m^2.
        effectiveness_factor (float): Effectiveness coefficient (0-1).

    Returns:
        float: Control force in newtons.
    """
    angle_rad = math.radians(deflection_angle_deg)
    return dynamic_pressure * control_surface_area * effectiveness_factor * angle_rad
